#!/usr/bin/env python

import os

import pre_run
import json
from termcolor import colored
import glob
import sys
import time
import argparse
from fabric.api import env
from handsfree import FabricSupport

parser = argparse.ArgumentParser()
required_group = parser.add_argument_group("required arguments")
required_group.add_argument('--host', '-H', help='VM Hostname')
required_group.add_argument('--version', '-v', help='DCM Version')
required_group.add_argument('--console_host', '-c', help='Console Hostname')
required_group.add_argument('--license_key', '-l', help='License Key')
required_group.add_argument('--download_pass', '-d', help='Download Password')
required_group.add_argument('--email', '-E', help='DCM Email Address')
required_group.add_argument('--first_name', '-F', help='DCM First Name')
required_group.add_argument('--last_name', '-L', help='DCM Last Name')
required_group.add_argument('--company_name', '-C', help='DCM Company Name')
required_group.add_argument('--setup', '-D', help='DCM setup directory', default='~/.dcm')
required_group.add_argument('--dry-run', '-t', help='Dry Run', action='store_true')

parser.add_argument('--shelluser', '-u', help='VM Shell User (Default: root)')
parser.add_argument('--shellkey', '-s', help='VM Shell User Key (Default: ~/.ssh/id_rsa)')

cmd_args = parser.parse_args()

def sanity_check(setup_dir):
    # for root, dirs, files in os.walk(setup_dir):
    #     level = root.replace(setup_dir, '').count(os.sep)
    #     indent = ' ' * 4 * (level)
    #     print('{}{}/'.format(indent, os.path.basename(root)))
    #     subindent = ' ' * 4 * (level + 1)
    #     for f in files:
    #         print('{}{}'.format(subindent, f))

    with open (setup_dir+'/users/initial-account.json', 'r') as f:
        json_data = json.loads(f.read())

        last_name = json_data['lastName']
        first_name = json_data['firstName']
        company_name = json_data['businessName']
        email = json_data['email']

        return email, first_name, last_name, company_name

if cmd_args.host is not None \
        and cmd_args.version is not None \
        and cmd_args.console_host is not None \
        and cmd_args.license_key is not None \
        and cmd_args.setup is not None \
        and cmd_args.download_pass is not None:
    env.skip_bad_hosts = True

    if cmd_args.dry_run:
        pre_run.dry_run(cmd_args.setup)
        sys.exit()

    if not os.path.isdir(cmd_args.setup):
        print "Error, no setup directory found."
        if not os.path.isfile(cmd_args.setup+'/users/initial-account.json'):
            print "Error, no initial account information found."
    else:
        email, first_name, last_name, company_name = sanity_check(cmd_args.setup)

    if cmd_args.shelluser is None:
        env.user = 'root'
    else:
        env.user = cmd_args.shelluser

    if cmd_args.shellkey is None:
        env.key_filename = os.path.expanduser('~') + '/.ssh/id_rsa'
    else:
        env.key_filename = cmd_args.shellkey

    total_start = time.time()
    fab = FabricSupport(cmd_args.host, cmd_args.version, cmd_args.console_host,
                        cmd_args.license_key, cmd_args.download_pass,
                        "/tmp/es-onpremise-chef-solo-" + cmd_args.version,
                        email, first_name, last_name,
                        company_name, cmd_args.setup)


    private_clouds = '{}/clouds/descriptors'.format(cmd_args.setup)
    cloud_credentials = '{}/clouds/credentials'.format(cmd_args.setup)
    num_private_clouds=len(glob.glob(private_clouds+'/*.json'))
    num_cloud_credentials=len(glob.glob(cloud_credentials+'/*.json'))

    print "Starting install of DCM version " + cmd_args.version

    install_tasks = ['fetch_vm_info', 'deps', 'fetch_release',
              'run_setup', 'install_release', 'create_master_api_key']

    configure_tasks = ['create_initial_user', 'install_admin', 'create_initial_cloud_accounts',
              'add_private_clouds', 'create_user_api_key', 'set_user_credentials', 'add_roles',
              'add_billing_codes', 'add_groups']

    if num_private_clouds == 0:
        configure_tasks.remove('add_private_clouds')

    if num_cloud_credentials == 0:
        configure_tasks.remove('set_user_credentials')

    for task in install_tasks:
        fab.execute(task)

    print "{:80}".format("Sleeping for a bit, please stand by."),
    time.sleep(100)
    print "{:}".format('[ ' + colored('ZZ', 'yellow') + ' ]')

    for task in configure_tasks:
        fab.execute(task)

    print '*** Script finished in', round(time.time() - total_start, 3), 'seconds.'
else:
    parser.print_help()
    sys.exit(1)
