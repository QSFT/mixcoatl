#!/usr/bin/env python

from mixcoatl.network.firewall import Firewall
from mixcoatl.network.firewall_rule import FirewallRule
from prettytable import PrettyTable
import argparse
import sys

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('firewallid', help='Firewall ID')
    parser.add_argument("--verbose", "-v", help="Produce verbose output", action="store_true")
    cmd_args = parser.parse_args()

    f = Firewall(cmd_args.firewallid)
    result = f.load()

    if result is not None:
        print("Cannot find the Firewall by the ID.")
        sys.exit(1)

    rules = f.rules
    if cmd_args.verbose:
        for rule in rules:
            rule.pprint()
    else:
        firewall_rules_table = PrettyTable(["Firewall Rule ID",
                                            "Source",
                                            "Source Type",
                                            "Destination",
                                            "Destination Type",
                                            "Protocol",
                                            "Direction",
                                            "Start Port",
                                            "End Port",
                                            "Permission",
                                            "Precedence"])
        for rule in rules:
                firewall_rules_table.add_row([rule.firewall_rule_id,
                                              rule.source if hasattr(rule,'source') else None,
                                              rule.source_type if hasattr(rule,'source_type') else None,
                                              rule.destination if hasattr(rule,'destination') else None,
                                              rule.destination_type if hasattr(rule,'destination_type') else None,
                                              rule.protocol if hasattr(rule,'protocol') else None,
                                              rule.direction if hasattr(rule,'direction') else None,
                                              rule.start_port if hasattr(rule, 'start_port') else None,
                                              rule.end_port if hasattr(rule, 'end_port') else None,
                                              rule.permission if hasattr(rule,'permission') else None,
                                              rule.precedence if hasattr(rule,'precedence') else None])
        firewall_rules_table.align = 'l'
        print(firewall_rules_table)
