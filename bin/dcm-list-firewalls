#!/usr/bin/env python

import os
import sys
import time
import json
import argparse
from prettytable import PrettyTable
from mixcoatl.network.firewall import Firewall
from mixcoatl import resource_utils, utils

if __name__ == '__main__':
    """ List firewalls."""
    start = time.time()
    parser = argparse.ArgumentParser()
    firewall_args = parser.add_mutually_exclusive_group()
    firewall_args.add_argument('--accountid', '-i', type=int, help='Account ID')
    firewall_args.add_argument('--regionid', '-r', type=int, help='Region ID')

    group_two = parser.add_mutually_exclusive_group()
    group_two.add_argument('--json', action='store_true',
        help='print API response in JSON format.')
    group_two.add_argument('--xml', action='store_true',
        help='print API response in XML format.')
    group_two.add_argument('--csv', action='store_true',
        help='print API response in CSV format.')
    cmd_args = parser.parse_args()

    if cmd_args.regionid is not None:
        results = Firewall.all(region_id=cmd_args.regionid, detail='basic')
    elif cmd_args.accountid is not None:
        results = Firewall.all(account_id=cmd_args.accountid, detail='basic')
    else:
        results = Firewall.all()

    if cmd_args.xml is True or cmd_args.json is True or cmd_args.csv is True:
        if cmd_args.xml is True:
            payload_format = "xml"
        elif cmd_args.csv is True:
            payload_format = "csv"
        else:
            payload_format = "json"

        print utils.print_format(results, payload_format)
    else:
        table = PrettyTable(["Firewall ID", "Name", "Region", "Provider ID", "Status"])
        for r in results:
            table.add_row([
                r.firewall_id,
                r.name,
                r.region['region_id'],
                r.provider_id,
                r.status])
        table.align = 'l'
        print(table)

    if 'DCM_DEBUG' in os.environ:
        print 'Results returned in', time.time()-start, 'seconds.'
