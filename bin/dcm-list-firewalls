#!/usr/bin/env python

from mixcoatl.network.firewall import Firewall
from prettytable import PrettyTable
import argparse
import sys

if __name__ == '__main__':
    """ List firewalls."""
    parser = argparse.ArgumentParser()
    firewall_args = parser.add_mutually_exclusive_group()
    firewall_args.add_argument('--accountid', '-i', type=int, help='Account ID')
    firewall_args.add_argument('--regionid', '-r', type=int, help='Region ID')

    group_two = parser.add_mutually_exclusive_group()
    group_two.add_argument('--json', action='store_true',
        help='print API response in JSON format.')
    group_two.add_argument('--xml', action='store_true',
        help='print API response in XML format.')
    cmd_args = parser.parse_args()

    if cmd_args.regionid is not None:
        firewalls = Firewall.all(region_id=cmd_args.regionid, detail='basic')
    elif cmd_args.accountid is not None:
        firewalls = Firewall.all(account_id=cmd_args.accountid, detail='basic')
    else:
        firewalls = Firewall.all(detail='basic')

    if cmd_args.xml is True or cmd_args.json is True:
        if cmd_args.xml is True:
            payload_format = "xml"
        else:
            payload_format = "json"

        print utils.print_format(cms, payload_format)
    else:
        table = PrettyTable(["Firewall ID", "Name", "Region", "Provider ID", "Status"])
        for r in firewalls['firewalls']:
            table.add_row([
                r['firewallId'],
                r['name'],
                r['region']['regionId'],
                r['providerId'],
                r['status']])
        table.align = 'l'
        print(table)
