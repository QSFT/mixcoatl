#!/usr/bin/env python

import os, sys, argparse, time
from mixcoatl import resource, utils
from prettytable import PrettyTable

if __name__ == '__main__':
    """ List regions. """
    start = time.time()
    parser = argparse.ArgumentParser()
    parser.add_argument('--extended', action='store_true', help='set level of API response detail to extended.')
    group_one = parser.add_mutually_exclusive_group()
    group_one.add_argument('--json', action='store_true', help='print API response in JSON format.')
    group_one.add_argument('--xml', action='store_true', help='print API response in XML format.')
    cmd_args = parser.parse_args()

    r = resource.Resource("geography/Region")

    if cmd_args.extended is True:
        r.request_details = 'extended'
    else:
        r.request_details = 'basic'

    if cmd_args.xml is True:
        r.payload_format = 'xml'
    else:
        r.payload_format = 'json'

    result = r.get(params=None)
    if r.last_error is not None:
        print utils.print_error(r.last_error, r.payload_format)
    else:
        if cmd_args.xml is True or cmd_args.json is True:
            print utils.print_format(r.last_request.content, r.payload_format)
        else:
            table = PrettyTable(["Region ID", "Provider ID", "Cloud", "Region Name", "Description", "Status"])
            for r in result['regions']:
                table.add_row([
                    r['regionId'],
                    r['providerId'],
                    r.cloud['cloud_provider_name'] if hasattr(r,'cloud_provider_name') else r['cloud']['cloudId'],
                    r.name if hasattr(r, 'name') else r['regionId'],
                    r['description'],
                    r['status']])
            table.align = 'l'
            print(table)

        if 'DCM_DEBUG' in os.environ:
            print 'Results returned in', time.time()-start, 'seconds.'
