#!/usr/bin/env python

import argparse
import sys
import json
import xml.dom.minidom
from mixcoatl import resource
from prettytable import PrettyTable

if __name__ == '__main__':
    """ List regions. """
    parser = argparse.ArgumentParser()
    parser.add_argument('parameter', nargs='?', default=None, help='query parameter')
    parser.add_argument('--extended', action='store_true', help='set level of API response detail to extended.')
    group_one = parser.add_mutually_exclusive_group()
    group_one.add_argument('--json', action='store_true', help='print API response in JSON format.')
    group_one.add_argument('--xml', action='store_true', help='print API response in XML format.')
    group_two = parser.add_mutually_exclusive_group()
    group_two.add_argument('--statuscode', action='store_true', help='print HTTP status code along with API response.')
    group_two.add_argument('--statuscodeonly', action='store_true', help='print HTTP status code only.')
    cmd_args = parser.parse_args()

    r = resource.Resource("geography/Region")

    if cmd_args.extended is True:
        r.request_details = 'extended'
    else:
        r.request_details = 'basic'
    if cmd_args.xml is True:
        r.payload_format = 'xml'
    else:
        r.payload_format = 'json'

    p = None if cmd_args.parameter is None else eval(cmd_args.parameter)

    result = r.get(params=p)

    if cmd_args.statuscode:
        print(r.status_code)
    elif cmd_args.statuscodeonly:
        print(r.status_code)
        sys.exit(0)

    if cmd_args.xml is True:
        try:
            print(xml.dom.minidom.parseString(r.last_request.content).toxml())
        except:
            print(result)
    else:
        data = json.loads(r.last_request.content)

        if cmd_args.json is True:
            print(json.dumps(data, sort_keys=True, indent=2))
        else:
            region_table = PrettyTable(["Region ID", "Provider ID", "Cloud", "Region Name", "Description", "Status"])
            for region in data['regions']:
                region_table.add_row([
                    region['regionId'],
                    region['providerId'],
                    region.cloud['cloud_provider_name'] if hasattr(region,'cloud_provider_name') else region['cloud']['cloudId'],
                    region.name if hasattr(region, 'name') else region['regionId'],
                    region['description'],
                    region['status']])
            region_table.align = 'l'
            print(region_table)
