#!/usr/bin/env python

import argparse
import sys
from mixcoatl import resource, resource_utils
from prettytable import PrettyTable

if __name__ == '__main__':
    """ List regions. """
    parser = argparse.ArgumentParser()
    parser.add_argument('--extended', action='store_true', help='set level of API response detail to extended.')
    group_one = parser.add_mutually_exclusive_group()
    group_one.add_argument('--json', action='store_true', help='print API response in JSON format.')
    group_one.add_argument('--xml', action='store_true', help='print API response in XML format.')
    cmd_args = parser.parse_args()

    r = resource.Resource("geography/Region")

    if cmd_args.extended is True:
        r.request_details = 'extended'
    else:
        r.request_details = 'basic'

    if cmd_args.xml is True:
        r.payload_format = 'xml'
    else:
        r.payload_format = 'json'

    result = r.get(params=None)
    if cmd_args.xml is True or cmd_args.json is True:
        print resource_utils.print_format(r.last_request.content, r.payload_format)
    else:
        region_table = PrettyTable(["Region ID", "Provider ID", "Cloud", "Region Name", "Description", "Status"])
        for region in result['regions']:
            region_table.add_row([
                region['regionId'],
                region['providerId'],
                region.cloud['cloud_provider_name'] if hasattr(region,'cloud_provider_name') else region['cloud']['cloudId'],
                region.name if hasattr(region, 'name') else region['regionId'],
                region['description'],
                region['status']])
        region_table.align = 'l'
        print(region_table)
