#!/usr/bin/env python

from mixcoatl.geography.datacenter import DataCenter
from prettytable import PrettyTable
from mixcoatl import resource_utils, utils
import argparse
import sys
import os

if __name__ == '__main__':
    """ List datacenters in a region. """
    parser = argparse.ArgumentParser()
    parser.add_argument('--regionid', '-r', type=int, help='Region ID')
    parser.add_argument('--regionpid', '-R', help='Region Provider ID such as us-east-1')

    group_two = parser.add_mutually_exclusive_group()
    group_two.add_argument('--json', action='store_true',
        help='print API response in JSON format.')
    group_two.add_argument('--xml', action='store_true',
        help='print API response in XML format.')
    group_two.add_argument('--csv', action='store_true',
        help='print API response in CSV format.')

    cmd_args = parser.parse_args()

    if cmd_args.regionid != None:
        results = DataCenter.all(cmd_args.regionid)
    elif cmd_args.regionpid != None:
        results = DataCenter.all(resource_utils.get_region_id(cmd_args.regionpid))
    else:
        parser.print_help()
        sys.exit(1)

    if cmd_args.xml is True or cmd_args.json is True or cmd_args.csv is True:
        if cmd_args.xml is True:
            payload_format = "xml"
        elif cmd_args.csv is True:
            payload_format = "csv"
        else:
            payload_format = "json"

        print utils.print_format(results, payload_format)
    else:
        table = PrettyTable(["Datacenter ID", "Provider ID", "Description", "Status"])
        for r in results:
            table.add_row([
                r.data_center_id,
                r.provider_id,
                r.description,
                r.status])
        table.align = 'l'
        print(table)

    if 'DCM_DEBUG' in os.environ:
        print 'Results returned in', time.time()-start, 'seconds.'
