#!/usr/bin/env python

from mixcoatl.network.network import Network
from mixcoatl import utils
from prettytable import PrettyTable
import argparse
import time
import sys
import os

if __name__ == '__main__':
    """ List networks."""
    start = time.time()
    parser = argparse.ArgumentParser()
    network_args = parser.add_mutually_exclusive_group()
    network_args.add_argument('--accountid', '-i', type=int, help='Account ID')
    network_args.add_argument('--regionid', '-r', type=int, help='Region ID')

    group_two = parser.add_mutually_exclusive_group()
    group_two.add_argument('--json', action='store_true',
        help='print API response in JSON format.')
    group_two.add_argument('--xml', action='store_true',
        help='print API response in XML format.')
    group_two.add_argument('--csv', action='store_true',
        help='print API response in CSV format.')
    cmd_args = parser.parse_args()

    if cmd_args.regionid is not None:
        results = Network.all(region_id=cmd_args.regionid, detail='basic')
    elif cmd_args.accountid is not None:
        results = Network.all(account_id=cmd_args.accountid, detail='basic')
    else:
        results = Network.all(detail='basic')

    if cmd_args.xml is True or cmd_args.json is True or cmd_args.csv is True:
        if cmd_args.xml is True:
            payload_format = "xml"
        elif cmd_args.csv is True:
            payload_format = "csv"
        else:
            payload_format = "json"

        print utils.print_format(results, payload_format)
    else:
        table = PrettyTable(["Network ID", "Region ID", "Name", "Provider ID", "Type", "Network Address"])
        for r in results:
            table.add_row([r.network_id, r.region['region_id'], r.name, r.provider_id, r.network_type, r.network_address])
        table.align = 'l'
        print(table)

    if 'DCM_DEBUG' in os.environ:
        print 'Results returned in', time.time()-start, 'seconds.'

    # for network in networks:
    #     network_table.add_row([network.network_id, network.region['region_id'], network.name,
    #                            network.provider_id, network.network_type, network.network_address])
    # network_table.align = 'l'
    # print(network_table)
