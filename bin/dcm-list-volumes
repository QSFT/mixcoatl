#!/usr/bin/env python

import os, sys, argparse, time
from mixcoatl import resource, utils
from prettytable import PrettyTable

if __name__ == '__main__':
    """ List Volumes. """
    start = time.time()
    parser = argparse.ArgumentParser()
    parser.add_argument('--extended', action='store_true', help='set level of API response detail to extended.')

    group_one = parser.add_mutually_exclusive_group()
    group_one.add_argument('--volumeid', '-v', type=int, help="Volume ID.")

    parser.add_argument('--regionid', '-r', type=int, help="Region ID.")
    parser.add_argument("--userid", "-u", help="Owning user's VM login ID. For example, p100.")
    parser.add_argument("--budgetid", "-b", type=int, help="Budget ID.")

    group_two = parser.add_mutually_exclusive_group()
    group_two.add_argument('--json', action='store_true', help='print API response in JSON format.')
    group_two.add_argument('--xml', action='store_true', help='print API response in XML format.')

    cmd_args = parser.parse_args()

    if cmd_args.volumeid is not None:
        r = resource.Resource("infrastructure/Volume/"+str(cmd_args.volumeid))
    else:
        r = resource.Resource("infrastructure/Volume")

    params = {}

    if cmd_args.extended is True:
        r.request_details = 'extended'
    else:
        r.request_details = 'basic'

    if cmd_args.regionid is not None:
        params['regionId'] = cmd_args.regionid

    if cmd_args.userid is not None:
        params['userId'] = cmd_args.userid

    if cmd_args.budgetid is not None:
        params['budget'] = cmd_args.budgetid

    if cmd_args.xml is True:
        r.payload_format = 'xml'
    else:
        r.payload_format = 'json'

    result = r.get(params=params)
    if r.last_error is not None:
        print utils.print_error(r.last_error, r.payload_format)
    else:
        if cmd_args.xml is True or cmd_args.json is True:
            print utils.print_format(r.last_request.content, r.payload_format)
        else:
            table = PrettyTable(["Volume ID", "Provider ID", "Zone", "Name", "Server", "Size", "Owner", "Budget", "Status"])
            for r in result['volumes']:
                table.add_row([
                    r['volumeId'],
                    r['providerId'],
                    r['dataCenter']['dataCenterId'],
                    r['name'],
                    r['server']['serverId'],
                    r['sizeString'],
                    r['owningAccount']['accountId'],
                    r['budget'],
                    r['status']])
            table.align = 'l'
            print(table)

        if 'DCM_DEBUG' in os.environ:
            print 'Results returned in', time.time()-start, 'seconds.'
